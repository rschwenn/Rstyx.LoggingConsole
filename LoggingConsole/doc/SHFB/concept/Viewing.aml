<?xml version="1.0" encoding="utf-8"?>
<topic id="c46c7181-fb57-41ab-b7f9-a32993e71bc8" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!-- for jedit: :mode=xml::folding=indent::indentSize=4::tabSize=4::collapseFolds=2: -->
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para> This topic covers aspects of the log viewer. </para>
    </introduction>
    
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="General">
      <title> General </title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
            The log viewer comes with some user interaction and is called <legacyBold>Console</legacyBold> that's why. The
            <codeEntityReference qualifyHint="false" autoUpgrade="true"> T:Rstyx.LoggingConsole.Console </codeEntityReference>
            can be obtained by the static 
            LogBox.Instance.<codeEntityReference qualifyHint="false" autoUpgrade="true"> P:Rstyx.LoggingConsole.LogBox.Console </codeEntityReference>
            property.
        </para>
        
        <para>
            The visual component of Console is a <legacyBold>WPF UserControl</legacyBold>.
            But it works in a Windows Forms application as well. You can obtain this by the 
            LogBox.Instance.Console.<codeEntityReference qualifyHint="false" autoUpgrade="true"> P:Rstyx.LoggingConsole.Console.ConsoleView </codeEntityReference>
            property.
        </para>
        
        <para>
            The <codeEntityReference qualifyHint="false" autoUpgrade="true"> T:Rstyx.LoggingConsole.ConsoleView </codeEntityReference>
            is intended to be embedded into Your application UI, but it can also be shown on a built-in or custom floating window.
        </para>
      </content>
    </section>
    
    <section address="ConsoleView on (built-in or custom) floating window">
      <title> ConsoleView on (built-in or custom) floating window </title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
            You can show the viewer on a floating window by invoking 
            LogBox.Instance.<codeEntityReference qualifyHint="false" autoUpgrade="true"> M:Rstyx.LoggingConsole.LogBox.showFloatingConsoleView </codeEntityReference>.
            By default this window is not modal, but this can be changed by the 
            LogBox.Instance.<codeEntityReference qualifyHint="false" autoUpgrade="true"> P:Rstyx.LoggingConsole.LogBox.isFloatingConsoleModal </codeEntityReference>
            property. 
        </para>
        
        <code language="vbnet" title="Visual Basic: Show ConsoleView on a floating window">
            ...
            Rstyx.LoggingConsole.LogBox.Instance.showFloatingConsoleView()
        </code> 
        
        <para>
            If the LogBox.Instance.<codeEntityReference qualifyHint="false" autoUpgrade="true"> P:Rstyx.LoggingConsole.LogBox.showConsoleOnError </codeEntityReference>
            property is "true" and an error message is logged, then the floating window is shown
            unless the ConsoleView is already embedded into any other window.
            In the latter case nothing happens unless the parent application responds to this setting in some way.
        </para>
        
        <alert class="note">
            There can be only one 
            <codeEntityReference> T:Rstyx.LoggingConsole.ConsoleView </codeEntityReference>
            connected to the LogBox. Hence You should not instantiate a second one.
            Also, before You call <codeEntityReference> M:Rstyx.LoggingConsole.LogBox.showFloatingConsoleView </codeEntityReference>
            You have to ensure that the <codeEntityReference> T:Rstyx.LoggingConsole.ConsoleView </codeEntityReference>
            isn't a child of another control (i.e. embedded in Your application Window).
        </alert>
        
        <alert class="note">
            By default the floating window is a <legacyBold>built-in WPF Window</legacyBold> whose title is bound to 
            LogBox.Instance.<codeEntityReference qualifyHint="false" autoUpgrade="true"> P:Rstyx.LoggingConsole.LogBox.DisplayName </codeEntityReference>.
            You can tell LoggingConsole to use <legacyBold>Your own window instead</legacyBold> 
            (maybe Windows Form or something special that integrates better in a bigger application) by setting the 
            LogBox.Instance.<codeEntityReference> P:Rstyx.LoggingConsole.LogBox.ShowFloatingConsoleViewAction </codeEntityReference> and 
            LogBox.Instance.<codeEntityReference> P:Rstyx.LoggingConsole.LogBox.HideFloatingConsoleViewAction </codeEntityReference> 
            properties to appropriate action delegates.
        </alert>
      </content>
    </section>
    
    <section address="ConsoleView embedded in a custom window">
      <title> ConsoleView embedded in a custom window </title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
            There are several ways to embed the viewer in Your own window:
            <list class="bullet">
                <listItem>
                    WPF and Forms: Place it with help of IDE just like any other Control. At initialization it will connect by itself to the LogBox.
                </listItem>
                <listItem>
                    WPF and Forms: In code assign <codeEntityReference> P:Rstyx.LoggingConsole.LogBox.Console.ConsoleView </codeEntityReference>
                    to the <quoteInline>Content</quoteInline> or <quoteInline>Child</quoteInline> property of a container.
                </listItem>
                <listItem>
                    Only WPF: Bind <codeEntityReference> P:Rstyx.LoggingConsole.LogBox.Console.ConsoleView </codeEntityReference>
                    to a ContentControl.
                </listItem>
            </list>
        </para>
        
        <code language="vbnet" title="Visual Basic: Embed Console in a WPF application">
            ...
            'Guess "LoggingConsolePanel" is the name of a ContentControl
            LoggingConsolePanel.Content = Rstyx.LoggingConsole.LogBox.Instance.Console.ConsoleView
        </code>
        
        <code language="vbnet" title="Visual Basic: Embed Console in a Windows Forms application">
            ...
            'Guess "LoggingConsolePanel" is the name of a System.Windows.Forms.Integration.ElementHost
            LoggingConsolePanel.Child = Rstyx.LoggingConsole.LogBox.Instance.Console.ConsoleView
        </code>
        
        <code language="xaml" title="XAML: Embed Console directly">
            ...
            xmlns:lc="clr-namespace:Rstyx.LoggingConsole;assembly=Rstyx.LoggingConsole"
            ...
            &lt;!-- Place ConsoleView into a ContentControl --&gt;
            &lt;ContentControl Name="LoggingConsolePanel" &gt; &lt;lc:ConsoleView /&gt; &lt;/ContentControl&gt; 
            ...
        </code>
        
        <code language="xaml" title="XAML: Embed Console using DataBinding">
            ...
            xmlns:lc="clr-namespace:Rstyx.LoggingConsole;assembly=Rstyx.LoggingConsole"
            ...
            &lt;!-- Binding ConsoleView to a ContentControl which acts as a placeholder --&gt;
            &lt;ContentControl Content="{Binding Source={x:Static lc:LogBox.Instance}, Path=Console.ConsoleView}" /&gt; 
            ...
        </code>
        
      </content>
    </section>
    
    <section address="Customizing ConsoleView">
      <title> Customizing ConsoleView </title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>
            The integrated option pane lets the user customize the Console in some way.
            All settings reflect properties. However, there is one property, which is intended 
            to be changed by the develoer only and that's why not available via UI: 
            Console.<codeEntityReference qualifyHint="false" autoUpgrade="true"> P:Rstyx.LoggingConsole.Console.activateErrorViewOnError </codeEntityReference>
        </para>
        
      </content>
    </section>
    
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>